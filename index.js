// index.js - Servidor principal completo con manejo estricto de vacaciones y optimizaciones avanzadas

// Import required packages
const path = require('path');
const restify = require('restify');
const fs = require('fs');
require('dotenv').config({ path: path.join(__dirname, '.env') });

// Import required bot services.
const {
    CloudAdapter,
    ConversationState,
    MemoryStorage,
    UserState,
    ConfigurationBotFrameworkAuthentication,
    CardFactory,
    TeamsInfo
} = require('botbuilder');

// Importar componentes del bot
const { TeamsBot } = require('./bots/teamsBot');
const { MainDialog } = require('./dialogs/mainDialog');

// Importar servicios
const conversationService = require('./services/conversationService');
const openaiService = require('./services/openaiService');

// ======================
// VALIDACI√ìN DE CONFIGURACI√ìN
// ======================

console.log('üîß Iniciando validaci√≥n de configuraci√≥n...');

const requiredEnvVars = [
    'MicrosoftAppId',
    'MicrosoftAppPassword',
    'OAUTH_CONNECTION_NAME'
];

const optionalEnvVars = [
    'OPENAI_API_KEY',
    'SERVICE_ENDPOINT',
    'API_KEY',
    'TOKEN_BUBBLE',
    'TOKEN_API',
    'COSMOSDB_ENDPOINT',
    'COSMOSDB_KEY'
];

// Validar variables requeridas
const missingVars = requiredEnvVars.filter(varName => {
    const value = process.env[varName] || process.env[varName.toLowerCase()];
    return !value;
});

if (missingVars.length > 0) {
    console.error('‚ùå ERROR: Faltan las siguientes variables de entorno REQUERIDAS:');
    missingVars.forEach(varName => console.error(`   - ${varName}`));
    console.error('Por favor, configura estas variables en el archivo .env');
    process.exit(1);
}

// Reportar variables opcionales
console.log('üìã Estado de servicios opcionales:');
optionalEnvVars.forEach(varName => {
    const value = process.env[varName];
    const status = value ? '‚úÖ Configurado' : '‚ö†Ô∏è No configurado';
    console.log(`   ${varName}: ${status}`);
});

// Configurar nombre de conexi√≥n OAuth
const connectionName = process.env.OAUTH_CONNECTION_NAME || process.env.connectionName;
console.log(`üîê Conexi√≥n OAuth configurada: ${connectionName}`);

// ======================
// CONFIGURACI√ìN DE AUTENTICACI√ìN
// ======================

console.log('üîë Configurando autenticaci√≥n Bot Framework...');

const botFrameworkAuthentication = new ConfigurationBotFrameworkAuthentication({
    MicrosoftAppId: process.env.MicrosoftAppId || process.env.MICROSOFT_APP_ID,
    MicrosoftAppPassword: process.env.MicrosoftAppPassword || process.env.MICROSOFT_APP_PASSWORD,
    MicrosoftAppTenantId: process.env.MicrosoftAppTenantId || process.env.MICROSOFT_APP_TENANT_ID,
    MicrosoftAppType: process.env.MicrosoftAppType || process.env.MICROSOFT_APP_TYPE || 'MultiTenant',
    OAuthConnectionName: connectionName
});

// ======================
// CONFIGURACI√ìN DEL ADAPTADOR
// ======================

console.log('üîå Configurando adaptador de bot...');

const adapter = new CloudAdapter(botFrameworkAuthentication);

// Configurar manejo de errores mejorado y espec√≠fico para vacaciones
adapter.onTurnError = async (context, error) => {
    const errorMsg = error.message || 'Ocurri√≥ un error inesperado.';
    const userId = context.activity?.from?.id || 'unknown';
    const activityType = context.activity?.type || 'unknown';
    
    console.error(`\n‚ùå [onTurnError] Error no manejado:`);
    console.error(`   üìç Usuario: ${userId}`);
    console.error(`   üìç Tipo de actividad: ${activityType}`);
    console.error(`   üìç Error: ${error.message}`);
    console.error(`   üìç Stack trace: ${error.stack}`);

    try {
        // An√°lisis espec√≠fico del error
        let userMessage = '‚ùå Lo siento, ocurri√≥ un error inesperado.';
        let shouldClearState = false;
        
        // Errores de autenticaci√≥n
        if (error.code === 'Unauthorized' || errorMsg.includes('authentication') || errorMsg.includes('token')) {
            userMessage = 'üîí **Error de autenticaci√≥n**\n\nTu sesi√≥n ha expirado o hay un problema de autenticaci√≥n. Por favor, escribe `login` para iniciar sesi√≥n nuevamente.';
            shouldClearState = true;
        }
        // Errores de servicio
        else if (error.code === 'ServiceUnavailable' || errorMsg.includes('service')) {
            userMessage = 'üîß **Servicio temporalmente no disponible**\n\nAlgunos servicios est√°n experimentando problemas temporales. Por favor, intenta en unos momentos.';
        }
        // Errores de timeout
        else if (errorMsg.includes('timeout') || errorMsg.includes('ETIMEDOUT')) {
            userMessage = '‚è∞ **Tiempo de espera agotado**\n\nLa operaci√≥n tard√≥ demasiado tiempo. Por favor, intenta nuevamente.';
        }
        // Errores espec√≠ficos de vacaciones
        else if (errorMsg.includes('vacation') || errorMsg.includes('vacaciones')) {
            userMessage = 'üèñÔ∏è **Error en sistema de vacaciones**\n\nHubo un problema procesando tu solicitud de vacaciones. Por favor, intenta nuevamente o contacta a Recursos Humanos.';
        }
        // Errores de API externa
        else if (errorMsg.includes('SIRH') || errorMsg.includes('botapiqas')) {
            userMessage = 'üîó **Error de sistema externo**\n\nHay un problema temporal con los sistemas de Recursos Humanos. Intenta m√°s tarde o contacta al administrador.';
        }
        // Errores de OpenAI
        else if (errorMsg.includes('openai') || errorMsg.includes('gpt')) {
            userMessage = 'ü§ñ **Error del asistente inteligente**\n\nEl asistente de IA est√° experimentando problemas. A√∫n puedes usar los comandos b√°sicos como `login`, `ayuda` o `logout`.';
        }
        // Errores de almacenamiento
        else if (errorMsg.includes('storage') || errorMsg.includes('cosmosdb')) {
            userMessage = 'üíæ **Error de almacenamiento**\n\nHay un problema temporal con el almacenamiento de datos. Tu informaci√≥n est√° segura, pero algunas funciones pueden estar limitadas.';
        }
        
        // Limpiar estado si es necesario
        if (shouldClearState && conversationState) {
            try {
                await conversationState.delete(context);
                console.log('üßπ Estado de conversaci√≥n limpiado debido a error de autenticaci√≥n');
            } catch (cleanupError) {
                console.error('Error limpiando estado:', cleanupError.message);
            }
        }
        
        // Enviar mensaje espec√≠fico al usuario
        await context.sendActivity(userMessage);
        
        // Ofrecer ayuda adicional para errores recurrentes
        if (error.isRecurring || (error.count && error.count > 3)) {
            await context.sendActivity('üí° **Ayuda adicional**:\n\n‚Ä¢ Escribe `ayuda` para ver comandos disponibles\n‚Ä¢ Escribe `estado` para verificar tu autenticaci√≥n\n‚Ä¢ Si el problema persiste, contacta al soporte t√©cnico');
        }
        
    } catch (innerError) {
        console.error(`‚ùå Error adicional en onTurnError: ${innerError.message}`);
        
        // √öltimo recurso: mensaje b√°sico
        try {
            await context.sendActivity('‚ùå Error cr√≠tico del sistema. Por favor, reinicia la aplicaci√≥n y contacta al soporte t√©cnico si el problema persiste.');
        } catch (finalError) {
            console.error(`‚ùå Error cr√≠tico enviando mensaje final: ${finalError.message}`);
        }
    }
};

// ======================
// CONFIGURACI√ìN DE ALMACENAMIENTO Y ESTADO
// ======================

console.log('üíæ Configurando almacenamiento y estado...');

// Usar MemoryStorage con l√≠mites y limpieza autom√°tica
const memoryStorage = new MemoryStorage();

// Crear estado de conversaci√≥n y usuario
const conversationState = new ConversationState(memoryStorage);
const userState = new UserState(memoryStorage);

// ======================
// CONFIGURACI√ìN DE DI√ÅLOGOS Y BOT
// ======================

console.log('ü§ñ Inicializando di√°logos y bot...');

// Crear el di√°logo principal
const dialog = new MainDialog();

// Registrar instancia globalmente para mantenimiento
global.mainDialogInstance = dialog;

// Crear el bot con configuraci√≥n avanzada
const bot = new TeamsBot(conversationState, userState, dialog);

// Verificar que el bot se inicializ√≥ correctamente
if (!bot.isInitialized()) {
    console.error('‚ùå ERROR: El bot no se inicializ√≥ correctamente');
    process.exit(1);
}

console.log('‚úÖ Bot inicializado exitosamente');
console.log('üìä Informaci√≥n del bot:', bot.getBotInfo());

// ======================
// CONFIGURACI√ìN DEL SERVIDOR
// ======================

console.log('üåê Configurando servidor HTTP...');

const port = process.env.PORT || process.env.port || 3978;

// Crear servidor HTTP con configuraci√≥n optimizada
const server = restify.createServer({
    name: 'Alfa Bot Server',
    version: '2.0.0',
    // Configuraci√≥n adicional para mejor rendimiento
    acceptable: ['application/json', 'text/html', 'text/plain'],
    handleUncaughtExceptions: false, // Manejamos nosotros las excepciones
    handleUpgrades: false,
    httpsServerOptions: null,
    ignoreTrailingSlash: true,
    maxParamLength: 100,
    noWritableContinue: false,
    router: {
        ignoreTrailingSlash: true,
        strictNext: false
    }
});

// ======================
// MIDDLEWARE DEL SERVIDOR
// ======================

console.log('üîß Configurando middleware...');

// Middleware de parsing de body
server.use(restify.plugins.bodyParser({
    maxBodySize: 1000000, // 1MB
    mapParams: true,
    mapFiles: false,
    overrideParams: false,
    uploadDir: os.tmpdir()
}));

// Middleware de query parser
server.use(restify.plugins.queryParser({
    mapParams: true
}));

// Configuraci√≥n CORS mejorada
server.use(function corsHandler(req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Max-Age', '86400'); // 24 horas
    
    // Manejar requests OPTIONS (preflight)
    if (req.method === 'OPTIONS') {
        res.send(204);
        return;
    }
    
    return next();
});

// Middleware de seguridad b√°sica
server.use(function securityHeaders(req, res, next) {
    res.header('X-Frame-Options', 'DENY');
    res.header('X-Content-Type-Options', 'nosniff');
    res.header('X-XSS-Protection', '1; mode=block');
    res.header('Referrer-Policy', 'strict-origin-when-cross-origin');
    return next();
});

// Middleware de logging avanzado
server.use(function requestLogger(req, res, next) {
    const start = Date.now();
    const method = req.method;
    const url = req.url;
    const userAgent = req.headers['user-agent'] || 'Unknown';
    const clientIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress || 'Unknown';
    
    // Log de request entrante
    console.log(`üì° [${new Date().toISOString()}] ${method} ${url} - IP: ${clientIP}`);
    
    // Log adicional para requests del bot
    if (method === 'POST' && url === '/api/messages') {
        if (req.body) {
            const activityType = req.body.type || 'unknown';
            const activityName = req.body.name || 'N/A';
            const fromId = req.body.from?.id || 'Unknown';
            const channelId = req.body.channelId || 'Unknown';
            
            console.log(`üì® Actividad: ${activityType} (${activityName}) - Usuario: ${fromId} - Canal: ${channelId}`);
            
            // Log especial para submits de tarjetas adaptativas
            if (req.body.value && Object.keys(req.body.value).length > 0) {
                console.log('üéØ Submit de tarjeta adaptativa detectado');
                console.log('üìã Datos del submit:', JSON.stringify(req.body.value, null, 2));
                
                // Log espec√≠fico para vacaciones
                if (req.body.value.vacation_type) {
                    console.log(`üèñÔ∏è Tipo de vacaci√≥n seleccionado: ${req.body.value.vacation_type}`);
                }
            }
            
            // Log para mensajes de texto
            if (req.body.text) {
                const messagePreview = req.body.text.length > 100 
                    ? req.body.text.substring(0, 100) + '...' 
                    : req.body.text;
                console.log(`üí¨ Mensaje: "${messagePreview}"`);
            }
        }
    }
    
    // Interceptar el final del request para logging de performance
    const originalEnd = res.end;
    res.end = function(chunk, encoding) {
        const duration = Date.now() - start;
        const statusCode = res.statusCode;
        const statusEmoji = statusCode >= 400 ? '‚ùå' : statusCode >= 300 ? '‚ö†Ô∏è' : '‚úÖ';
        
        console.log(`üì° [${new Date().toISOString()}] ${method} ${url} - ${statusEmoji} ${statusCode} (${duration}ms)`);
        
        // Log de advertencia para requests lentos
        if (duration > 5000) {
            console.warn(`‚è∞ Request lento detectado: ${method} ${url} - ${duration}ms`);
        }
        
        originalEnd.call(res, chunk, encoding);
    };
    
    return next();
});

// Middleware para agregar la instancia del bot al estado del turno
const addBotToTurnState = (req, res, next) => {
    if (!req.turnState) {
        req.turnState = new Map();
    }
    req.turnState.set('bot', bot);
    req.turnState.set('ConversationState', conversationState);
    req.turnState.set('UserState', userState);
    return next();
};

// Middleware de rate limiting b√°sico (en memoria)
const rateLimitMap = new Map();
const rateLimit = (req, res, next) => {
    const clientIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    const now = Date.now();
    const windowMs = 60000; // 1 minuto
    const maxRequests = 100; // m√°ximo 100 requests por minuto por IP
    
    if (!rateLimitMap.has(clientIP)) {
        rateLimitMap.set(clientIP, { count: 1, resetTime: now + windowMs });
        return next();
    }
    
    const rateLimitInfo = rateLimitMap.get(clientIP);
    
    if (now > rateLimitInfo.resetTime) {
        // Reset del contador
        rateLimitMap.set(clientIP, { count: 1, resetTime: now + windowMs });
        return next();
    }
    
    if (rateLimitInfo.count >= maxRequests) {
        res.status(429);
        res.json({
            error: 'Too Many Requests',
            message: 'Rate limit exceeded. Please try again later.',
            retryAfter: Math.ceil((rateLimitInfo.resetTime - now) / 1000)
        });
        return;
    }
    
    rateLimitInfo.count++;
    return next();
};

server.use(rateLimit);

// ======================
// RUTAS DEL SERVIDOR
// ======================

console.log('üõ£Ô∏è Configurando rutas del servidor...');

// Ruta principal para mensajes del bot con manejo avanzado
server.post('/api/messages', addBotToTurnState, async (req, res) => {
    try {
        // Logging detallado de actividades
        const body = req.body;
        if (body) {
            const activityType = body.type || 'unknown';
            const activityName = body.name || 'N/A';
            
            console.log(`üì® Procesando actividad - Tipo: ${activityType}, Nombre: ${activityName}`);
            
            // Validaci√≥n b√°sica de la actividad
            if (!body.from || !body.conversation) {
                console.warn('‚ö†Ô∏è Actividad con datos incompletos:', {
                    hasFrom: !!body.from,
                    hasConversation: !!body.conversation,
                    type: activityType
                });
            }
            
            // Log espec√≠fico para diferentes tipos de actividad
            if (activityType === 'message') {
                const messageText = body.text ? `"${body.text.substring(0, 50)}${body.text.length > 50 ? '...' : ''}"` : 'sin texto';
                console.log(`üí¨ Mensaje: ${messageText}`);
                
                // Detecci√≥n mejorada de submits de tarjetas adaptativas
                if (body.value && typeof body.value === 'object' && Object.keys(body.value).length > 0) {
                    console.log('üéØ Submit de tarjeta adaptativa confirmado');
                    console.log('üìã Datos completos del submit:', JSON.stringify(body.value, null, 2));
                    
                    // Validaci√≥n espec√≠fica para diferentes tipos de submit
                    const { action, method, url, vacation_type } = body.value;
                    
                    if (vacation_type) {
                        console.log(`üèñÔ∏è Submit de gu√≠a de vacaciones - Tipo: ${vacation_type}`);
                    } else if (action && method && url) {
                        console.log(`‚úÖ Submit de acci√≥n API v√°lido: ${action} (${method})`);
                    } else {
                        console.warn('‚ö†Ô∏è Submit con datos incompletos:', { action, method, url, vacation_type });
                    }
                }
            } else if (activityType === 'invoke') {
                console.log(`üîß Invoke: "${activityName}"`);
                
                // Log especial para actividades OAuth
                if (activityName && activityName.includes('signin')) {
                    console.log('üîê Actividad OAuth detectada');
                }
            } else if (activityType === 'event') {
                console.log(`üìÖ Evento: "${activityName}"`);
            } else if (activityType === 'membersAdded') {
                console.log('üëã Nuevos miembros a√±adidos a la conversaci√≥n');
            }
        }
        
        // Procesar la solicitud con el adaptador
        await adapter.process(req, res, async (context) => {
            try {
                console.log('üîÑ Procesando con adaptador...');
                console.log('üìä Contexto - Actividad tipo:', context.activity.type);
                console.log('üìä Contexto - Canal:', context.activity.channelId);
                console.log('üìä Contexto - Usuario:', context.activity.from?.id || 'Unknown');
                
                // Verificar l√≠mites de recursos antes de procesar
                const memUsage = process.memoryUsage();
                const heapUsedMB = Math.round(memUsage.heapUsed / 1024 / 1024);
                
                if (heapUsedMB > 500) { // M√°s de 500MB
                    console.warn(`‚ö†Ô∏è Uso alto de memoria: ${heapUsedMB}MB`);
                    
                    // Forzar garbage collection si est√° disponible
                    if (global.gc) {
                        global.gc();
                        console.log('üßπ Garbage collection ejecutado');
                    }
                }
                
                // Ejecutar la l√≥gica del bot
                await bot.run(context);
                
                console.log('‚úÖ Procesamiento completado exitosamente');
            } catch (botError) {
                console.error('‚ùå Error en bot.run():', botError.message);
                console.error('üìç Stack trace:', botError.stack);
                
                // Manejo espec√≠fico de errores del bot
                if (botError.message.includes('authentication')) {
                    console.log('üîí Error de autenticaci√≥n detectado en bot.run()');
                } else if (botError.message.includes('timeout')) {
                    console.log('‚è∞ Timeout detectado en bot.run()');
                } else if (botError.message.includes('vacation')) {
                    console.log('üèñÔ∏è Error del sistema de vacaciones en bot.run()');
                }
                
                throw botError; // Re-lanzar para que lo maneje el adaptador
            }
        });
        
    } catch (error) {
        console.error('‚ùå Error cr√≠tico al procesar mensaje:', error.message);
        console.error('üìç Stack trace completo:', error.stack);
        
        // An√°lizar tipo de error para estad√≠sticas
        if (error.message.includes('authentication')) {
            console.log('üìä Categor√≠a de error: Autenticaci√≥n');
        } else if (error.message.includes('network') || error.message.includes('timeout')) {
            console.log('üìä Categor√≠a de error: Red/Conectividad');
        } else if (error.message.includes('vacation')) {
            console.log('üìä Categor√≠a de error: Sistema de vacaciones');
        } else {
            console.log('üìä Categor√≠a de error: Desconocido');
        }
        
        // Enviar respuesta de error si a√∫n no se ha enviado
        if (!res.headersSent) {
            res.status(500).json({
                error: 'Error interno del servidor',
                message: 'No se pudo procesar la solicitud del bot',
                timestamp: new Date().toISOString(),
                requestId: req.getId ? req.getId() : Date.now()
            });
        }
    }
});

// Servir archivos est√°ticos con cache headers
server.get('/public/*', restify.plugins.serveStatic({
    directory: path.join(path.resolve(), 'public'),
    appendRequestPath: false,
    default: 'index.html',
    maxAge: 86400 // Cache por 24 horas
}));

// Ruta mejorada para callback de OAuth
server.get('/oauthcallback', (req, res, next) => {
    console.log('üîê Recibida solicitud a /oauthcallback');
    console.log('üîê Query params:', req.query);
    console.log('üîê Headers relevantes:', {
        'user-agent': req.headers['user-agent'],
        'referer': req.headers['referer']
    });
    
    const htmlContent = `
    <!DOCTYPE html>
    <html lang="es">
        <head>
            <title>Autenticaci√≥n Completada - Alfa Bot</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <meta name="robots" content="noindex, nofollow">
            <style>
                * {
                    box-sizing: border-box;
                    margin: 0;
                    padding: 0;
                }
                
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    min-height: 100vh;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    line-height: 1.6;
                }
                
                .container { 
                    text-align: center; 
                    padding: 2rem;
                    background: rgba(255, 255, 255, 0.1);
                    border-radius: 20px;
                    backdrop-filter: blur(15px);
                    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                    border: 1px solid rgba(255, 255, 255, 0.18);
                    max-width: 450px;
                    width: 90%;
                    margin: 1rem;
                }
                
                .checkmark { 
                    font-size: 4rem; 
                    color: #4CAF50; 
                    margin-bottom: 1rem;
                    animation: pulse 2s infinite;
                    filter: drop-shadow(0 0 10px rgba(76, 175, 80, 0.3));
                }
                
                @keyframes pulse {
                    0% { transform: scale(1); }
                    50% { transform: scale(1.1); }
                    100% { transform: scale(1); }
                }
                
                h1 { 
                    margin: 1rem 0; 
                    font-size: 1.8rem;
                    font-weight: 600;
                }
                
                p { 
                    margin: 0.8rem 0; 
                    opacity: 0.9; 
                    line-height: 1.5;
                    font-size: 1rem;
                }
                
                .countdown {
                    font-weight: bold;
                    color: #4CAF50;
                    padding: 1rem;
                    background: rgba(255, 255, 255, 0.1);
                    border-radius: 10px;
                    margin-top: 1rem;
                }
                
                .instructions {
                    background: rgba(255, 255, 255, 0.05);
                    padding: 1rem;
                    border-radius: 10px;
                    margin: 1rem 0;
                    font-size: 0.9rem;
                }
                
                .close-button {
                    background: linear-gradient(45deg, #4CAF50, #45a049);
                    color: white;
                    border: none;
                    padding: 0.8rem 2rem;
                    border-radius: 25px;
                    font-size: 1rem;
                    cursor: pointer;
                    margin-top: 1rem;
                    transition: all 0.3s ease;
                }
                
                .close-button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(76, 175, 80, 0.4);
                }
                
                @media (max-width: 480px) {
                    .container {
                        padding: 1.5rem;
                    }
                    
                    h1 {
                        font-size: 1.5rem;
                    }
                    
                    .checkmark {
                        font-size: 3rem;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="checkmark">‚úÖ</div>
                <h1>¬°Autenticaci√≥n Completada!</h1>
                
                <div class="instructions">
                    <p><strong>üéâ ¬°Perfecto!</strong> Te has autenticado exitosamente en Alfa Bot.</p>
                    <p>üîÑ Regresa a Microsoft Teams o Web Chat para continuar.</p>
                    <p>ü§ñ El bot ya est√° listo para ayudarte con vacaciones, consultas y m√°s.</p>
                </div>
                
                <div class="countdown">
                    <p>Esta ventana se cerrar√° autom√°ticamente en <span id="timer">10</span> segundos</p>
                </div>
                
                <button class="close-button" onclick="closeWindow()">
                    üö™ Cerrar Ventana
                </button>
            </div>
            
            <script>
                let countdown = 10;
                const timer = document.getElementById('timer');
                const button = document.querySelector('.close-button');
                
                function closeWindow() {
                    try {
                        // Intentar diferentes m√©todos de cierre
                        if (window.opener) {
                            window.close();
                        } else if (window.parent !== window) {
                            window.parent.postMessage('oauth_complete', '*');
                        } else {
                            window.close();
                        }
                    } catch(e) {
                        console.log('No se pudo cerrar la ventana autom√°ticamente');
                        alert('Por favor, cierra esta ventana manualmente y regresa a la aplicaci√≥n.');
                    }
                }
                
                const interval = setInterval(function() {
                    countdown--;
                    timer.textContent = countdown;
                    
                    if (countdown <= 0) {
                        clearInterval(interval);
                        closeWindow();
                    }
                }, 1000);
                
                // Permitir cierre inmediato con tecla Escape
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        closeWindow();
                    }
                });
                
                // Manejar visibilidad de la p√°gina
                document.addEventListener('visibilitychange', function() {
                    if (document.hidden) {
                        // Pausar countdown si la p√°gina no es visible
                        clearInterval(interval);
                    }
                });
            </script>
        </body>
    </html>`;
    
    res.writeHead(200, {
        'Content-Length': Buffer.byteLength(htmlContent),
        'Content-Type': 'text/html; charset=utf-8',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
    });
    res.write(htmlContent);
    res.end();
    
    return next();
});

// Ruta de salud del servicio con informaci√≥n detallada
server.get('/health', (req, res, next) => {
    try {
        const memUsage = process.memoryUsage();
        const healthStatus = {
            status: 'healthy',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            version: '2.0.0',
            
            // Estado de servicios
            services: {
                bot: !!bot && bot.isInitialized(),
                openai: !!process.env.OPENAI_API_KEY,
                oauth: !!connectionName,
                cosmosdb: !!process.env.COSMOSDB_ENDPOINT,
                azure_search: !!process.env.SERVICE_ENDPOINT,
                bubble_api: !!process.env.TOKEN_BUBBLE,
                snow_api: !!process.env.TOKEN_API
            },
            
            // Memoria y rendimiento
            memory: {
                used: Math.round(memUsage.heapUsed / 1024 / 1024),
                total: Math.round(memUsage.heapTotal / 1024 / 1024),
                external: Math.round(memUsage.external / 1024 / 1024),
                rss: Math.round(memUsage.rss / 1024 / 1024)
            },
            
            // Informaci√≥n del proceso
            process: {
                pid: process.pid,
                platform: process.platform,
                nodeVersion: process.version,
                arch: process.arch
            },
            
            // Estad√≠sticas del bot
            botStats: bot ? bot.getBotInfo() : null,
            
            // Estado de servicios de conversaci√≥n
            conversationService: conversationService ? conversationService.getServiceStats() : null,
            
            // Estad√≠sticas de di√°logos
            dialogStats: dialog ? dialog.getAuthenticationStats() : null
        };
        
        // Determinar estado general
        const criticalServices = ['bot', 'oauth'];
        const criticalServicesFailing = criticalServices.filter(service => !healthStatus.services[service]);
        
        if (criticalServicesFailing.length > 0) {
            healthStatus.status = 'degraded';
            healthStatus.issues = [`Servicios cr√≠ticos fallando: ${criticalServicesFailing.join(', ')}`];
        }
        
        if (healthStatus.memory.used > 400) {
            healthStatus.status = healthStatus.status === 'healthy' ? 'warning' : 'critical';
            healthStatus.issues = healthStatus.issues || [];
            healthStatus.issues.push('Uso alto de memoria');
        }
        
        res.json(healthStatus);
    } catch (error) {
        console.error('Error en endpoint /health:', error.message);
        res.status(500).json({
            status: 'error',
            message: 'Error obteniendo estado de salud',
            timestamp: new Date().toISOString()
        });
    }
    
    return next();
});

// Ruta de informaci√≥n del bot m√°s detallada
server.get('/info', (req, res, next) => {
    const botInfo = {
        name: 'Alfa Bot',
        version: '2.0.0',
        description: 'Bot inteligente para empleados de Alfa Corporation con sistema estricto de gesti√≥n de vacaciones',
        
        features: [
            'Asistente de OpenAI con herramientas especializadas',
            'Sistema estricto de gesti√≥n de vacaciones',
            'Acciones de API SIRH din√°micas',
            'Autenticaci√≥n OAuth segura',
            'B√∫squeda vectorial en documentos (Azure Search)',
            'Integraci√≥n con ServiceNow',
            'Consulta de men√∫ del comedor',
            'Directorio de empleados',
            'Compatible con Teams y Web Chat',
            'Tarjetas adaptativas din√°micas'
        ],
        
        vacationSystem: {
            version: '2.0.0',
            type: 'Strict Guided Process',
            features: [
                'Detecci√≥n autom√°tica de intenci√≥n',
                'Proceso guiado para solicitudes ambiguas',
                'Validaci√≥n de tipos de vacaciones',
                'Tarjetas din√°micas contextuales',
                'Manejo espec√≠fico por tipo (Regular, Matrimonio, Nacimiento)'
            ]
        },
        
        endpoints: {
            messages: '/api/messages',
            health: '/health',
            oauth: '/oauthcallback',
            info: '/info',
            debug: '/debug (solo desarrollo)',
            metrics: '/metrics'
        },
        
        supportedChannels: [
            'Microsoft Teams',
            'Web Chat',
            'Bot Framework Emulator'
        ],
        
        apis: {
            sirh: process.env.SIRH_API_URL || 'https://botapiqas-alfacorp.msappproxy.net',
            openai: !!process.env.OPENAI_API_KEY,
            azure_search: !!process.env.SERVICE_ENDPOINT,
            bubble: !!process.env.TOKEN_BUBBLE,
            servicenow: !!process.env.TOKEN_API
        },
        
        authentication: {
            type: 'OAuth 2.0',
            connection: connectionName,
            provider: 'Azure Active Directory'
        },
        
        statistics: {
            uptime: process.uptime(),
            nodeVersion: process.version,
            platform: process.platform,
            timestamp: new Date().toISOString()
        }
    };
    
    res.json(botInfo);
    return next();
});

// Ruta de m√©tricas para monitoreo
server.get('/metrics', (req, res, next) => {
    try {
        const memUsage = process.memoryUsage();
        const metrics = {
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            
            // M√©tricas de memoria
            memory: {
                heapUsed: memUsage.heapUsed,
                heapTotal: memUsage.heapTotal,
                external: memUsage.external,
                rss: memUsage.rss
            },
            
            // M√©tricas del bot
            bot: bot ? {
                initialized: bot.isInitialized(),
                authenticatedUsers: bot.authenticatedUsers ? bot.authenticatedUsers.size : 0
            } : null,
            
            // M√©tricas de conversaci√≥n
            conversation: conversationService ? conversationService.getServiceStats() : null,
            
            // M√©tricas de di√°logos
            dialog: dialog ? {
                authStats: dialog.getAuthenticationStats(),
                logoutStats: dialog.getLogoutStats ? dialog.getLogoutStats() : null
            } : null,
            
            // M√©tricas del sistema
            system: {
                loadAverage: require('os').loadavg(),
                freeMemory: require('os').freemem(),
                totalMemory: require('os').totalmem(),
                cpus: require('os').cpus().length
            }
        };
        
        res.json(metrics);
    } catch (error) {
        console.error('Error en endpoint /metrics:', error.message);
        res.status(500).json({
            error: 'Error obteniendo m√©tricas',
            timestamp: new Date().toISOString()
        });
    }
    
    return next();
});

// Ruta de debug para desarrolladores (solo en desarrollo)
server.get('/debug', (req, res, next) => {
    if (process.env.NODE_ENV === 'production') {
        res.status(403).json({ 
            error: 'Debug endpoint not available in production',
            suggestion: 'Use /health or /metrics for production monitoring'
        });
        return next();
    }
    
    const debugInfo = {
        environment: process.env.NODE_ENV || 'development',
        
        // Estado de instancias
        instances: {
            bot: !!bot,
            dialog: !!dialog,
            conversationService: !!conversationService,
            openaiService: !!openaiService
        },
        
        // Variables de entorno (sin valores sensibles)
        envVars: {
            microsoftAppId: !!process.env.MicrosoftAppId,
            microsoftAppPassword: !!process.env.MicrosoftAppPassword,
            oauthConnection: !!connectionName,
            openaiApiKey: !!process.env.OPENAI_API_KEY,
            cosmosdbEndpoint: !!process.env.COSMOSDB_ENDPOINT,
            azureSearchEndpoint: !!process.env.SERVICE_ENDPOINT,
            bubbleToken: !!process.env.TOKEN_BUBBLE,
            snowToken: !!process.env.TOKEN_API
        },
        
        // Estado detallado del bot
        botDebug: bot ? {
            initialized: bot.isInitialized(),
            info: bot.getBotInfo(),
            authenticatedUsersCount: bot.authenticatedUsers ? bot.authenticatedUsers.size : 0,
            activeDialogs: bot.activeDialogs ? bot.activeDialogs.size : 0
        } : null,
        
        // Estado de servicios
        services: {
            conversation: conversationService ? conversationService.getHealthStatus() : null,
            openai: {
                available: !!openaiService,
                toolsCount: openaiService && openaiService.tools ? openaiService.tools.length : 0
            }
        },
        
        // Informaci√≥n del sistema
        system: {
            memory: process.memoryUsage(),
            uptime: process.uptime(),
            versions: process.versions,
            argv: process.argv,
            cwd: process.cwd()
        }
    };
    
    res.json(debugInfo);
    return next();
});

// Ruta de administraci√≥n para limpiezas manuales (solo desarrollo)
server.post('/admin/cleanup', (req, res, next) => {
    if (process.env.NODE_ENV === 'production') {
        res.status(403).json({ error: 'Admin endpoint not available in production' });
        return next();
    }
    
    try {
        const results = {
            timestamp: new Date().toISOString(),
            actions: []
        };
        
        // Limpiar conversaciones antiguas
        if (conversationService && typeof conversationService.cleanupOldMessages === 'function') {
            const cleanedMessages = conversationService.cleanupOldMessages();
            results.actions.push(`Mensajes limpiados: ${cleanedMessages}`);
        }
        
        // Limpiar di√°logos activos
        if (dialog && typeof dialog.clearActiveDialogs === 'function') {
            const clearedDialogs = dialog.clearActiveDialogs();
            results.actions.push(`Di√°logos limpiados: ${clearedDialogs}`);
        }
        
        // Forzar garbage collection
        if (global.gc) {
            global.gc();
            results.actions.push('Garbage collection ejecutado');
        }
        
        // Limpiar rate limit cache
        rateLimitMap.clear();
        results.actions.push('Cache de rate limit limpiado');
        
        console.log('üßπ Limpieza manual ejecutada:', results.actions);
        
        res.json({
            success: true,
            message: 'Limpieza ejecutada correctamente',
            results
        });
        
    } catch (error) {
        console.error('Error en limpieza manual:', error.message);
        res.status(500).json({
            success: false,
            error: 'Error ejecutando limpieza',
            message: error.message
        });
    }
    
    return next();
});

// ======================
// INICIALIZACI√ìN DEL SERVIDOR
// ======================

server.listen(port, () => {
    console.log('\nüöÄ ================================');
    console.log('ü§ñ Alfa Bot iniciado exitosamente');
    console.log('üöÄ ================================');
    console.log(`üì° Servidor: ${server.name} v${server.version}`);
    console.log(`üåê URL: ${server.url}`);
    console.log(`üîå Puerto: ${port}`);
    console.log(`üîê OAuth: ${connectionName}`);
    console.log('\nüìö Endpoints disponibles:');
    console.log('   POST /api/messages     - Mensajes del bot');
    console.log('   GET  /health          - Estado del servicio');
    console.log('   GET  /info            - Informaci√≥n del bot');
    console.log('   GET  /metrics         - M√©tricas de rendimiento');
    console.log('   GET  /debug           - Debug (solo desarrollo)');
    console.log('   GET  /oauthcallback   - Callback OAuth');
    console.log('   POST /admin/cleanup   - Limpieza manual (solo desarrollo)');
    console.log('\nüîó Enlaces √∫tiles:');
    console.log('   Bot Framework Emulator: https://docs.microsoft.com/azure/bot-service/bot-service-debug-emulator');
    console.log('   Teams Developer Portal: https://dev.teams.microsoft.com/');
    console.log('\n‚úÖ Funcionalidades habilitadas:');
    console.log('   üèñÔ∏è Sistema estricto de gesti√≥n de vacaciones');
    console.log('   üéØ Tarjetas adaptativas din√°micas');
    console.log('   ü§ñ Asistente OpenAI con herramientas');
    console.log('   üîí Autenticaci√≥n OAuth segura');
    console.log('   üíæ Almacenamiento optimizado');
    console.log('   üìä Monitoreo y m√©tricas');
    console.log('\nüéØ Bot listo para recibir mensajes');
    console.log('üîß Compatible con Web Chat y Microsoft Teams\n');
});

// ======================
// MANEJO DE SE√ëALES DEL SISTEMA
// ======================

// Funci√≥n de limpieza antes del cierre
async function gracefulShutdown(signal) {
    console.log(`\nüõë Recibida se√±al ${signal}, iniciando cierre graceful...`);
    
    try {
        // Estad√≠sticas finales
        if (conversationService) {
            const stats = conversationService.getServiceStats();
            console.log('üìä Estad√≠sticas finales del servicio de conversaci√≥n:', stats);
        }
        
        if (dialog) {
            const authStats = dialog.getAuthenticationStats();
            console.log('üìä Estad√≠sticas finales de autenticaci√≥n:', authStats);
        }
        
        // Cerrar servidor
        console.log('üîå Cerrando servidor HTTP...');
        server.close(() => {
            console.log('‚úÖ Servidor HTTP cerrado correctamente');
            
            // Limpiar recursos
            console.log('üßπ Limpiando recursos...');
            rateLimitMap.clear();
            
            if (global.mainDialogInstance) {
                global.mainDialogInstance = null;
            }
            
            console.log('‚úÖ Recursos limpiados');
            console.log('üëã Alfa Bot desconectado correctamente');
            process.exit(0);
        });
        
        // Timeout de seguridad
        setTimeout(() => {
            console.log('‚ö†Ô∏è Timeout alcanzado, forzando cierre');
            process.exit(1);
        }, 10000);
        
    } catch (error) {
        console.error('‚ùå Error durante cierre graceful:', error.message);
        process.exit(1);
    }
}

process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// Control de errores no manejados
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Promise Rejection:', reason);
    console.error('üìç En la promesa:', promise);
    
    // Log adicional para debugging
    if (reason && reason.stack) {
        console.error('üìç Stack trace:', reason.stack);
    }
    
    // No cerrar el proceso autom√°ticamente, solo registrar
    console.log('‚ö†Ô∏è Continuando ejecuci√≥n despu√©s de Promise Rejection');
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error.message);
    console.error('üìç Stack trace:', error.stack);
    
    // Intentar cerrar el servidor gracefully
    console.log('üõë Iniciando cierre de emergencia...');
    
    try {
        server.close(() => {
            console.log('üõë Servidor cerrado debido a excepci√≥n no manejada');
            process.exit(1);
        });
    } catch (closeError) {
        console.error('‚ùå Error cerrando servidor en emergencia:', closeError.message);
    }
    
    // Si no se puede cerrar en 5 segundos, forzar el cierre
    setTimeout(() => {
        console.log('üö® Forzando cierre del proceso');
        process.exit(1);
    }, 5000);
});

// ======================
// TAREAS DE MANTENIMIENTO
// ======================

// Limpiar usuarios completados del di√°logo cada hora
setInterval(() => {
    try {
        if (dialog && typeof dialog.clearActiveDialogs === 'function') {
            const cleared = dialog.clearActiveDialogs();
            if (cleared > 0) {
                console.log(`üßπ Mantenimiento: ${cleared} di√°logos activos limpiados`);
            }
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Error en mantenimiento de di√°logos:', error.message);
    }
}, 60 * 60 * 1000); // 1 hora

// Limpiar cache de rate limiting cada 30 minutos
setInterval(() => {
    try {
        const now = Date.now();
        let cleared = 0;
        
        for (const [ip, data] of rateLimitMap.entries()) {
            if (now > data.resetTime) {
                rateLimitMap.delete(ip);
                cleared++;
            }
        }
        
        if (cleared > 0) {
            console.log(`üßπ Mantenimiento: ${cleared} entradas de rate limit limpiadas`);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Error en mantenimiento de rate limit:', error.message);
    }
}, 30 * 60 * 1000); // 30 minutos

// Reporte de estad√≠sticas cada 6 horas
setInterval(() => {
    try {
        const memUsage = process.memoryUsage();
        const uptime = process.uptime();
        
        console.log('\nüìä ====== REPORTE DE ESTAD√çSTICAS ======');
        console.log(`‚è±Ô∏è Uptime: ${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m`);
        console.log(`üíæ Memoria: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB / ${Math.round(memUsage.heapTotal / 1024 / 1024)}MB`);
        
        if (bot && bot.authenticatedUsers) {
            console.log(`üë• Usuarios autenticados: ${bot.authenticatedUsers.size}`);
        }
        
        if (conversationService) {
            const stats = conversationService.getServiceStats();
            console.log(`üí¨ Mensajes totales: ${stats.totalMessages}`);
            console.log(`üó£Ô∏è Conversaciones: ${stats.totalConversations}`);
        }
        
        console.log('üìä =====================================\n');
    } catch (error) {
        console.warn('‚ö†Ô∏è Error generando reporte de estad√≠sticas:', error.message);
    }
}, 6 * 60 * 60 * 1000); // 6 horas

// Log de inicializaci√≥n completada
console.log('üéØ Proceso de inicializaci√≥n completado');
console.log(`üîß Variables de entorno configuradas: ${[...requiredEnvVars, ...optionalEnvVars].filter(v => !!process.env[v]).length}/${requiredEnvVars.length + optionalEnvVars.length}`);
console.log('‚è≥ Esperando actividades...\n');

// Habilitar garbage collection si est√° disponible
if (global.gc) {
    console.log('‚ôªÔ∏è Garbage collection habilitado');
} else {
    console.log('‚ö†Ô∏è Garbage collection no disponible (ejecutar con --expose-gc para habilitarlo)');
}